// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using back.Data;

#nullable disable

namespace back.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251015193850_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("back.Models.DB.Piezometer", b =>
                {
                    b.Property<int>("PiezometroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PiezometroId"));

                    b.Property<decimal>("CotaActualBocaTubo")
                        .HasColumnType("Decimal(10,5)")
                        .HasColumnName("Cota_actual_boca_tubo");

                    b.Property<decimal>("CotaActualTerreno")
                        .HasColumnType("Decimal(10,5)")
                        .HasColumnName("Cota_actual_terreno");

                    b.Property<decimal>("CotaFondoPozo")
                        .HasColumnType("Decimal(10,5)")
                        .HasColumnName("Cota_fondo_pozo");

                    b.Property<int>("DepositoId")
                        .HasColumnType("int")
                        .HasColumnName("DepositoId");

                    b.Property<decimal>("Elevacion")
                        .HasColumnType("Decimal(15,5)")
                        .HasColumnName("Elevacion");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Estado");

                    b.Property<decimal>("Este")
                        .HasColumnType("Decimal(15,5)")
                        .HasColumnName("Este");

                    b.Property<DateOnly>("FechaInstalacion")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_instalacion");

                    b.Property<string>("NombrePiezometro")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Nombre_piezometro");

                    b.Property<decimal>("Norte")
                        .HasColumnType("Decimal(15,5)")
                        .HasColumnName("Norte");

                    b.Property<decimal>("ProfundidadActualPozo")
                        .HasColumnType("Decimal(10,5)")
                        .HasColumnName("Profundidad_actual_pozo");

                    b.Property<decimal>("StickUp")
                        .HasColumnType("Decimal(10,5)")
                        .HasColumnName("Stick_up");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Ubicacion");

                    b.HasKey("PiezometroId");

                    b.HasIndex("DepositoId");

                    b.ToTable("Piezometro");
                });

            modelBuilder.Entity("back.Models.DB.PiezometerMeasurements", b =>
                {
                    b.Property<int>("MedicionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MedicionId"));

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Comentario");

                    b.Property<decimal>("CotaNivelPiezometro")
                        .HasColumnType("Decimal(10,5)")
                        .HasColumnName("Cota_Nivel_Piezometro");

                    b.Property<DateOnly>("FechaMedicion")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_medicion");

                    b.Property<decimal>("LongitudMedicion")
                        .HasColumnType("Decimal(10,5)")
                        .HasColumnName("Longitud_medicion");

                    b.Property<int>("PiezometroId")
                        .HasColumnType("int")
                        .HasColumnName("PiezometroId");

                    b.HasKey("MedicionId");

                    b.HasIndex("PiezometroId");

                    b.ToTable("MedicionPiezometro");
                });

            modelBuilder.Entity("back.Models.DB.TailingsDeposit", b =>
                {
                    b.Property<int>("DepositoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DepositoId"));

                    b.Property<decimal>("CoordenadaEste")
                        .HasColumnType("Decimal(10,5)")
                        .HasColumnName("CoordenadaEste");

                    b.Property<decimal>("CoordenadaNorte")
                        .HasColumnType("Decimal(10,5)")
                        .HasColumnName("CoordenadaNorte");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_creacion");

                    b.Property<string>("NombreDeposito")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Nombre_deposito");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Ubicacion");

                    b.Property<decimal>("ZonaUtm")
                        .HasColumnType("Decimal(10,5)")
                        .HasColumnName("ZonaUtm");

                    b.HasKey("DepositoId");

                    b.ToTable("Deposito");
                });

            modelBuilder.Entity("back.Models.DB.TopographicLandmark", b =>
                {
                    b.Property<int>("HitoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("HitoId"));

                    b.Property<int>("DepositoId")
                        .HasColumnType("int")
                        .HasColumnName("DepositoId");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Descripcion");

                    b.Property<string>("NombreHito")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Nombre_hito");

                    b.HasKey("HitoId");

                    b.HasIndex("DepositoId");

                    b.HasIndex("NombreHito")
                        .IsUnique();

                    b.ToTable("Hito");
                });

            modelBuilder.Entity("back.Models.DB.TopographicMeasurements", b =>
                {
                    b.Property<int>("MedicionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MedicionId"));

                    b.Property<decimal>("AcimutAbsoluto")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("AcimutAbsoluto");

                    b.Property<decimal>("AcimutRelativo")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("AcimutRelativo");

                    b.Property<decimal>("BuzamientoAbsoluto")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("BuzamientoAbsoluto");

                    b.Property<decimal>("BuzamientoRelativo")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("BuzamientoRelativo");

                    b.Property<decimal>("Elevacion")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("Elevacion");

                    b.Property<bool>("EsBase")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("EsBase");

                    b.Property<decimal>("Este")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("Este");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("Fecha");

                    b.Property<int>("FrecuenciaMonitoreo")
                        .HasColumnType("int")
                        .HasColumnName("FrecuenciaMonitoreo");

                    b.Property<int>("HitoId")
                        .HasColumnType("int")
                        .HasColumnName("HitoId");

                    b.Property<decimal>("HorizontalAbsoluto")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("HorizontalAbsoluto");

                    b.Property<decimal>("HorizontalAcmulado")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("HorizontalAcmulado");

                    b.Property<decimal>("HorizontalRelativo")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("HorizontalRelativo");

                    b.Property<decimal>("InversaVelocidadMedia")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("InversaVelocidadMedia");

                    b.Property<decimal>("Norte")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("Norte");

                    b.Property<int>("TiempoDias")
                        .HasColumnType("int")
                        .HasColumnName("TiempoDias");

                    b.Property<decimal>("TotalAbsoluto")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("TotalAbsoluto");

                    b.Property<decimal>("TotalRelativo")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("TotalRelativo");

                    b.Property<decimal>("VelocidadMedia")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("VelocidadMedia");

                    b.Property<decimal>("VerticalAbsoluto")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("VerticalAbsoluto");

                    b.Property<decimal>("VerticalRelativo")
                        .HasColumnType("decimal(15,5)")
                        .HasColumnName("VerticalRelativo");

                    b.HasKey("MedicionId");

                    b.HasIndex("HitoId");

                    b.ToTable("MedicionHito");
                });

            modelBuilder.Entity("back.Models.DB.Piezometer", b =>
                {
                    b.HasOne("back.Models.DB.TailingsDeposit", "Deposito")
                        .WithMany("Piezometros")
                        .HasForeignKey("DepositoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deposito");
                });

            modelBuilder.Entity("back.Models.DB.PiezometerMeasurements", b =>
                {
                    b.HasOne("back.Models.DB.Piezometer", "Piezometro")
                        .WithMany("Mediciones")
                        .HasForeignKey("PiezometroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Piezometro");
                });

            modelBuilder.Entity("back.Models.DB.TopographicLandmark", b =>
                {
                    b.HasOne("back.Models.DB.TailingsDeposit", "Deposito")
                        .WithMany("Hitos")
                        .HasForeignKey("DepositoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deposito");
                });

            modelBuilder.Entity("back.Models.DB.TopographicMeasurements", b =>
                {
                    b.HasOne("back.Models.DB.TopographicLandmark", "Hito")
                        .WithMany("Mediciones")
                        .HasForeignKey("HitoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hito");
                });

            modelBuilder.Entity("back.Models.DB.Piezometer", b =>
                {
                    b.Navigation("Mediciones");
                });

            modelBuilder.Entity("back.Models.DB.TailingsDeposit", b =>
                {
                    b.Navigation("Hitos");

                    b.Navigation("Piezometros");
                });

            modelBuilder.Entity("back.Models.DB.TopographicLandmark", b =>
                {
                    b.Navigation("Mediciones");
                });
#pragma warning restore 612, 618
        }
    }
}
